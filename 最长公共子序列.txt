//暴力递归，超时
// class Solution {
// public:

//     int DP(string &text1, string &text2, int i, int j)
//     {
//         if(i == -1 || j == -1)
//             return 0;

//         if(text1[i] == text2[j])
//         {
//             return DP(text1, text2, i-1, j-1) + 1;
//         }
//         else
//         {
//             return max(DP(text1, text2, i-1, j), DP(text1, text2, i, j-1));
//         }

//     }

//     int longestCommonSubsequence(string text1, string text2) {
//         int i = text1.size() - 1;
//         int j = text2.size() - 1;
//         return DP(text1, text2, i, j);
//     }
// };

class Solution {
public:

    int longestCommonSubsequence(string text1, string text2) {

        vector<vector<int>> arr(text1.size()+1, vector<int>(text2.size()+1));
        int i,j;
        for(i = 1; i < text1.size() + 1; i++)
        {
            for(j = 1; j < text2.size() + 1; j++)
            {
                if(text1[i-1] == text2[j-1])
                {
                    arr[i][j] = arr[i-1][j-1] + 1;
                }
                else
                {
                    arr[i][j] = max(arr[i-1][j], arr[i][j-1]);
                }
            }
        }

        return arr[i-1][j-1];

    }
};
