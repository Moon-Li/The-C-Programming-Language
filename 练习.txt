#include<iostream>
#include<string>
#include<list>

using namespace std;

template<typename T, typename P>
void Swap(T* a, P* b)
{
	T c = *a;
	*a = (T)*b;
	*b = (P)c;
}

template <class t1, class t2>
class Node
{
public:
	Node()
	{}
	Node(t1 a, t2 b)
		:_a(a)
		, _b(b)
	{

	}
private:
	t1 _a;
	t2 _b;
};

void test1()
{
	Node<int, char> N1(2,'A');

}

int test()
{
	int a = 0, b = 1;
	char c = 'a', d = 'b';
	double e = 1.0, f = 2.0;
	//Swap(a, b);
	//Swap(c, d);
	//Swap(e, f);
	Swap<int,char>(&b, &d);
	test1();


	return 0;
}

int test3()
{
	string str;	//""
	string cp(str);	//""
	string str2("12345");	//"12345"
	string str3(str2, 2);	//"345"
	string str4(str2, 2, 2);	//"34"
	string str5("123456", 4);	//"1234"
	string str6(20, 'a');	//"aaaaaaaaaa aaaaaaaaaa"
	cout << str << endl;
	cout << cp << endl;
	cout << str2 << endl;
	cout << str3 << endl;
	cout << str4 << endl;
	cout << str5 << endl;
	cout << str6 << endl;



	return 0;
}

void test4()
{
	//正向迭代器

	string str = "12345";
	string::iterator first = str.begin();
	string::iterator end = str.end();
	//遍历元素
	while (first != end)
	{
		//解引用
		cout << *first << " ";
		//移动迭代器
		first++;
	}
	cout << endl;

	list<int> lst;
	lst.push_back(1);
	lst.push_back(2);
	lst.push_back(3);
	lst.push_back(4);
	list<int> ::iterator lit = lst.begin();
	while (lit != lst.end())
	{
		cout << *lit << " ";
		lit++;
	}
	cout << endl;

}

void test5()
{
	//反向迭代器

	string str = "12345";
	string::reverse_iterator end = str.rbegin();
	string::reverse_iterator first = str.rend();
	//遍历元素
	while (first != end)
	{
		//解引用
		cout << *end << " ";
		//移动迭代器
		end++;
	}
	cout << endl;

	list<int> lst;
	lst.push_back(1);
	lst.push_back(2);
	lst.push_back(3);
	lst.push_back(4);
	list<int> ::reverse_iterator lfirst = lst.rbegin();
	list<int> ::reverse_iterator lend = lst.rend();
	while (lfirst != lend)
	{
		cout << *lfirst << " ";
		lfirst++;
	}
	cout << endl;
}

int main()
{
	//test1();
	//test2();
	//test3();
	//test4();
	test5();


	return 0;
}