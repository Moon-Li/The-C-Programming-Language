class Solution {
public:
    /**
     *
     * @param obstacleGrid int整型vector<vector<>>
     * @return int整型
     */

    int uniquePathsWithObstacles(vector<vector<int> >& obstacleGrid) {
        // write code here
        if(obstacleGrid.empty())
            return 0;
        int l = obstacleGrid.size();
        int r = obstacleGrid[0].size();
        vector<vector<int>> arr(l, vector<int>(r));
        arr[0][0] = 1;
        for(int i = 0; i < l; i++)
        {
            for(int j = 0; j < r; j++)
            {
                if(!obstacleGrid[i][j])
                {
                    if(i == 0 && j == 0)
                        continue;
                    else if(i == 0)
                    {
                        arr[i][j] = arr[i][j-1];
                    }
                    else if(j == 0)
                    {
                        arr[i][j] = arr[i-1][j];
                    }
                    else{
                        arr[i][j] = arr[i-1][j] + arr[i][j-1];
                    }
                }
                else
                    arr[i][j] = 0;
            }
        }
         
        return arr[l-1][r-1];
    }
};