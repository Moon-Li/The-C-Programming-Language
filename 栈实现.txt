#include<iostream>
#include<vector>
#include<list>
#include<queue>

using namespace std;

template <class T, class Container = deque<T>>

//栈实现
class Stack
{
public:
	void push(const T& a)
	{
		_c.push_back(a);
	}

	void pop()
	{
		_c.pop_back();
	}

	T& top()
	{
		return _c.back();
	}

	size_t size()
	{
		return _c.size();
	}

	bool empty()
	{
		return _c.empty();
	}

private:
	Container _c;
};


template <class T, class Container = deque<T>>

//队列实现
class Queue
{
public:
	void push(const T& a)
	{
		_b.push_back(a);
	}

	void pop()
	{
		_b.pop_front();
	}

	T& front()
	{
		return _b.front();
	}

	size_t size()
	{
		return _b.size();
	}

	bool empty()
	{
		return _b.empty();
	}

private:
	Container _b;

};


template <class T, class Container = vector<T>>

//优先级队列
class Priority_Queue
{
public:
	void push(const T& val)
	{
		_d.push_back(val);
		shiftUp(_d.size() - 1);
	}

	void pop()
	{
		swap(_d[0], _d[_d.size() - 1]);
		_d.pop_back();
		shiftDown(0);
	}

	const T& top()
	{
		return _d.front();
	}

	size_t size()
	{
		return _d.size();
	}

	bool empty()
	{
		return _d.empty();
	}

private:
	void shiftDown(int parent)
	{
		int child = parent * 2 + 1;
		int size = _d.size();

		while (child < size)
		{
			if (child + 1 < size && _d[child] < _d[child + 1])
				child++;
			if (_d[parent] < _d[child])
			{
				swap(_d[parent], _d[child]);
				parent = child;
				child = parent * 2 + 1;
			}
			else
			{
				break;
			}
		}
	}

	void shiftUp(int child)
	{
		int parent = (child - 1) / 2;

		while (child > 0)
		{
			if (_d[parent] < _d[child])
			{
				swap(_d[parent], _d[child]);
				child = parent;
				parent = (child - 1) / 2;
			}
			else
			{
				break;
			}
		}
	}

private:
	Container _d;
};

void testSt()
{
	Stack<int> St;

	St.push(1);
	St.push(2);
	St.push(3);
	St.push(4);
	St.push(5);

	while (!St.empty())
	{
		cout << St.top() << " ";
		St.pop();
	}
	cout << endl;

}

void tetsQu()
{
	Queue<int, list<int>> Qu;

	Qu.push(1);
	Qu.push(2);
	Qu.push(3);
	Qu.push(4);
	Qu.push(5);

	while (!Qu.empty())
	{
		cout << Qu.front() << " ";
		Qu.pop();
	}

	cout << endl;

}

void testPQ()
{
	Priority_Queue<int> pq;
	pq.push(1);
	pq.push(7);
	pq.push(3);
	pq.push(99);
	pq.push(-8);

	while (!pq.empty())
	{
		cout << pq.top() << " ";
		pq.pop();
	}

	cout << endl;
}

int main()
{
	//testSt();

	//tetsQu();

	testPQ();

	return  0;
}